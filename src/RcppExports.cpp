// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// rftrain
List rftrain(DataFrame rdf, List par);
RcppExport SEXP _brif_rftrain(SEXP rdfSEXP, SEXP parSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type rdf(rdfSEXP);
    Rcpp::traits::input_parameter< List >::type par(parSEXP);
    rcpp_result_gen = Rcpp::wrap(rftrain(rdf, par));
    return rcpp_result_gen;
END_RCPP
}
// rfpredict
DataFrame rfpredict(List rf, DataFrame rdf, int vote_method, int nthreads);
RcppExport SEXP _brif_rfpredict(SEXP rfSEXP, SEXP rdfSEXP, SEXP vote_methodSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type rf(rfSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type rdf(rdfSEXP);
    Rcpp::traits::input_parameter< int >::type vote_method(vote_methodSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(rfpredict(rf, rdf, vote_method, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// printBrifTree
void printBrifTree(List rf, int which_tree);
RcppExport SEXP _brif_printBrifTree(SEXP rfSEXP, SEXP which_treeSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type rf(rfSEXP);
    Rcpp::traits::input_parameter< int >::type which_tree(which_treeSEXP);
    printBrifTree(rf, which_tree);
    return R_NilValue;
END_RCPP
}
// rftrainpredict
DataFrame rftrainpredict(DataFrame rdf, DataFrame rdf_new, List par);
RcppExport SEXP _brif_rftrainpredict(SEXP rdfSEXP, SEXP rdf_newSEXP, SEXP parSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type rdf(rdfSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type rdf_new(rdf_newSEXP);
    Rcpp::traits::input_parameter< List >::type par(parSEXP);
    rcpp_result_gen = Rcpp::wrap(rftrainpredict(rdf, rdf_new, par));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_brif_rftrain", (DL_FUNC) &_brif_rftrain, 2},
    {"_brif_rfpredict", (DL_FUNC) &_brif_rfpredict, 4},
    {"_brif_printBrifTree", (DL_FUNC) &_brif_printBrifTree, 2},
    {"_brif_rftrainpredict", (DL_FUNC) &_brif_rftrainpredict, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_brif(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
